#!env perl
use strict; use warnings;
use Data::Dumper;
use Term::ANSIColor;

my $LOCALEDIR=$ENV{LOCALEDIR} || 'locale';
my %flags = map {($_=>1)} grep { /^-/ } @ARGV;
if ($flags{'-h'} || $flags{'--help'}) {
    printf "Usage: $0 [--color] [--markdown] [locales...]\n";
    printf "\n";
    printf "Options:";
    printf "  --color     Colorize percentages";
    printf "  --markdown  Produce extensive Markdown-formatted output";
    exit 0;
}
my @locales = grep { ! /^-/ } @ARGV;
unless (scalar @locales) {
    @locales = split('\n', qx(ls $LOCALEDIR|sed 's/\\..*//'));
}

sub po_file {
    return sprintf("%s/%s.UTF-8/LC_MESSAGES/palma.po", $LOCALEDIR, $_[0]);
}

sub parse_po {
    my $fname = po_file($_[0]);
    my @lines = do {
        open my $fh, '<', $fname or die ("No such file $fname");
        <$fh>;
    };
    my ($cur, %ret);
    my $state_msgid = 1;
    for (@lines) {
        if (/^msgid "(.*)"/) {
            $state_msgid = 1;
            $cur = $1;
            $ret{$cur} = "";
        } elsif (/^msgstr "(.*)"/) {
            $state_msgid = 0;
            $ret{$cur} .= $1;
        } elsif (/^"(.*)"/) {
            if ($state_msgid) {
                $cur .= $1;
            } else {
                $ret{$cur} .= $1;
            }
        }
    }
    delete $ret{""};
    return %ret;
}
sub percent {
    my $perc = sprintf("%.2f", 100 * $_[0]);
    return $perc unless $flags{'--color'};
    return colored($perc,
        $perc == 100 ? 'bold green' :
        $perc > 90 ? 'green' :
        $perc > 50 ? 'yellow' :
        'red');
}

my %reference_po = parse_po('en_US');
my $markdown_mode = exists $flags{'--markdown'};
my $md_header = qq(
# Translation Stats

> **DO NOT EDIT!**
>
> This file is generated by `$0 --markdown`
);
my $md_table = "|Locale|Completion|\n|---|---|";
my $md_body = '';
for my $locale (sort @locales) {
    next if $locale eq 'en_US';
    my %po = parse_po($locale);
    my @total = keys %po;
    my @untranslated = grep { $po{$_} =~ /^$/ || exists $reference_po{$po{$_}} } @total;
    my $nr_translated = scalar @total - scalar @untranslated;
    if (! $markdown_mode) {
        printf("%s\t%s%%\t (%s / %s)\n", $locale, percent($nr_translated / scalar @total), $nr_translated, scalar @total);
        next;
    }
    $md_table .= sprintf "\n|[%s](#%s)|%s|", $locale, lc $locale, percent($nr_translated / scalar @total);
    $md_body .= sprintf "\n## %s\n\n", $locale;
    $md_body .= sprintf "Completion: **%s** (%s / %s strings)\n\n", percent($nr_translated / scalar @total), $nr_translated, scalar @total;
    $md_body .= sprintf "Contributors:\n\n";
    my $contrib_cmd = join ' ', 'git log --format=format:"%aN"', po_file($locale);
    $md_body .= qx($contrib_cmd|sort|uniq|sed 's/^/  * /g');
    if (scalar @untranslated) {
        $md_body .= sprintf "\nMissing:\n";
        for (sort @untranslated) {
            $md_body .= sprintf("  * `%s`\n", $_)
        }
    }
}
if ($markdown_mode) {
    print join("\n", $md_header, $md_table, $md_body);
}
# warn Dumper keys %reference_po;
